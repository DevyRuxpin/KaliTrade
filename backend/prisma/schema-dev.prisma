// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exchangeConnections ExchangeConnection[]
  tradingStrategies   TradingStrategy[]
  trades             Trade[]
  portfolios         Portfolio[]
  notifications      Notification[]
  apiKeys            ApiKey[]
  sessions           Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ExchangeConnection {
  id           String   @id @default(cuid())
  userId       String
  exchangeName String
  exchangeId   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  permissions  String   // Comma-separated permissions
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, exchangeName])
  @@map("exchange_connections")
}

model TradingStrategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  type        String   // Strategy type as string
  config      String   // JSON as string
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trading_strategies")
}

model Trade {
  id               String   @id @default(cuid())
  userId           String
  exchangeName     String
  symbol           String
  side             String   // BUY/SELL
  type             String   // MARKET/LIMIT/STOP
  quantity         Decimal
  price            Decimal?
  status           String   // PENDING/FILLED/CANCELLED
  filledQuantity   Decimal  @default(0)
  averagePrice     Decimal?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model Order {
  id               String   @id @default(cuid())
  userId           String
  exchangeName     String
  exchangeOrderId  String
  symbol           String
  side             String   // BUY/SELL
  type             String   // MARKET/LIMIT/STOP
  quantity         Decimal
  price            Decimal?
  status           String   // PENDING/FILLED/CANCELLED
  filledQuantity   Decimal  @default(0)
  averagePrice     Decimal?
  config           String?  // JSON as string
  exchangeData     String?  // JSON as string
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("orders")
}

model Portfolio {
  id           String   @id @default(cuid())
  userId       String
  name         String
  totalValue   Decimal  @default(0)
  totalCost    Decimal  @default(0)
  profitLoss   Decimal  @default(0)
  profitMargin Decimal  @default(0)
  positions    String   // JSON as string
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model PerformanceMetric {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime
  totalReturn  Decimal
  sharpeRatio  Decimal
  maxDrawdown  Decimal
  createdAt    DateTime @default(now())

  @@map("performance_metrics")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Notification type as string
  title     String
  message   String
  data      String?  // JSON as string
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  exchange    String
  key         String   @unique
  permissions String   // Comma-separated permissions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model OAuthState {
  id        String   @id @default(cuid())
  state     String   @unique
  userId    String
  exchange  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("oauth_states")
}
